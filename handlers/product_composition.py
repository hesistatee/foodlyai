from aiogram import Router, F
from aiogram.types import Message
from services.image_processor import ImageProcessor
from services.food_analyzer_service import FoodAnalyzer

router = Router()
image_processor = ImageProcessor()
food_analyzer = FoodAnalyzer()


@router.message(F.photo)
async def analyze_food_composition(message: Message) -> None:    
    status_message = await message.answer("üîç –†–∞–∑–±–∏—Ä–∞—é —Å–æ—Å—Ç–∞–≤...")
    
    base64_image = await image_processor.process_telegram_photo(message=message)
    response = food_analyzer.analyze_product_composition(base64_image=base64_image)
    
    formatted_response = format_analysis_response(response)
    await status_message.delete()
    
    await message.answer(
        formatted_response,
        parse_mode='HTML'
    )

def format_analysis_response(response_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    
    harmful = response_data.get('harmful_substances', [])
    beneficial = response_data.get('beneficial_substances', [])
    score = response_data.get('product_score', 0)
    explanation = response_data.get('explanation', '')
    
    message_lines = []
    
    message_lines.append(f"<b>üèÜ –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞: {score}/10</b>")
    message_lines.append(f"<i>{explanation}</i>")
    message_lines.append("")
    
    if harmful:
        message_lines.append("‚ö†Ô∏è <b>–í—Ä–µ–¥–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞:</b>")
        for substance in harmful:
            message_lines.append(f"‚Ä¢ {substance}")
    else:
        message_lines.append("‚úÖ <b>–í—Ä–µ–¥–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞:</b> –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
    
    message_lines.append("")
    
    if beneficial:
        message_lines.append("üåø <b>–ü–æ–ª–µ–∑–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞:</b>")
        for substance in beneficial:
            message_lines.append(f"‚Ä¢ {substance}")
    else:
        message_lines.append("‚ùå <b>–ü–æ–ª–µ–∑–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞:</b> –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
    
    message_lines.append("")
    
    message_lines.append("üìä <b>–®–∫–∞–ª–∞ –∫–∞—á–µ—Å—Ç–≤–∞:</b>")
    message_lines.append(f"[{'‚≠ê' * score}{'‚òÜ' * (10 - score)}]")
    
    return "\n".join(message_lines)