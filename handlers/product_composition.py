from typing import Any

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession

from database.repositories import UserRepository
from services import FoodAnalyzer, ImageProcessor, OpenAIService
from static.texts import OPENAI_SERVICE_ERROR_MESSAGE, SCAN_PRODUCT_COMPOSITION_TEXT
from utils.keyboards import choose_analyze_kb
from utils.states import MainGroup

router = Router()
image_processor = ImageProcessor()
food_analyzer = FoodAnalyzer(openai_service=OpenAIService())


@router.message(F.text == SCAN_PRODUCT_COMPOSITION_TEXT)
async def message_before_analyze(
    message: Message, session: AsyncSession, state: FSMContext
) -> None:
    tg_id = message.from_user.id
    repo = UserRepository(session=session)
    user = await repo.get_user(tg_id)

    if not user:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∂–µ—Ç—Å—è, –º—ã –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º—ã.\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start"
        )
        return
    elif (
        not await repo.check_subscription_active(telegram_id=tg_id)
        and not user.is_admin
    ):
        await message.answer(
            "‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É üí´"
        )
        return

    await state.set_state(MainGroup.analyze_product_composition_state)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–æ—Å—Ç–∞–≤–∞ –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞")


@router.message(MainGroup.analyze_product_composition_state)
async def analyze_food_composition(
    message: Message, session: AsyncSession, state: FSMContext
) -> None:
    if not message.photo:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–æ—Å—Ç–∞–≤–∞")
        return

    repo = UserRepository(session=session)

    await repo.update_number_of_requests(telegram_id=message.from_user.id)

    status_message = await message.answer("üîç –†–∞–∑–±–∏—Ä–∞—é —Å–æ—Å—Ç–∞–≤...")

    base64_image = await image_processor.process_telegram_photo(message=message)
    try:
        response = await food_analyzer.analyze_product_composition(
            base64_image=base64_image
        )
        formatted_response = format_analysis_response(response)
        await status_message.delete()

        await message.answer(
            formatted_response, parse_mode="HTML", reply_markup=choose_analyze_kb
        )
    except Exception:
        await status_message.delete()
        await message.answer(OPENAI_SERVICE_ERROR_MESSAGE, parse_mode="HTML")
        await state.clear()

    await state.clear()


def format_analysis_response(response_data: dict[Any, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""

    harmful = response_data.get("harmful_substances", [])
    beneficial = response_data.get("beneficial_substances", [])
    score = response_data.get("product_score", 0)
    explanation = response_data.get("explanation", "")

    message_lines: list[str] = []

    message_lines.append(f"<b>üèÜ –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞: {score}/10</b>")
    message_lines.append(f"<i>{explanation}</i>")
    message_lines.append("")

    if harmful:
        message_lines.append("‚ö†Ô∏è <b>–í—Ä–µ–¥–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞:</b>")
        for substance in harmful:
            message_lines.append(f"‚Ä¢ {substance}")
    else:
        message_lines.append("‚úÖ <b>–í—Ä–µ–¥–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞:</b> –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")

    message_lines.append("")

    if beneficial:
        message_lines.append("üåø <b>–ü–æ–ª–µ–∑–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞:</b>")
        for substance in beneficial:
            message_lines.append(f"‚Ä¢ {substance}")
    else:
        message_lines.append("‚ùå <b>–ü–æ–ª–µ–∑–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞:</b> –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")

    message_lines.append("")

    message_lines.append("üìä <b>–®–∫–∞–ª–∞ –∫–∞—á–µ—Å—Ç–≤–∞:</b>")
    message_lines.append(f"[{'‚≠ê' * score}{'‚òÜ' * (10 - score)}]")

    return "\n".join(message_lines)
