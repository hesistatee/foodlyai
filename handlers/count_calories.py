from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from services.image_processor import ImageProcessor
from services.food_analyzer_service import FoodAnalyzer
from static.texts import COUNT_THE_NUMBER_OF_CALORIES_TEXT
from utils.states import MainGroup
from utils.keyboards import choose_action_kb
from database.repositories import UserRepository
from sqlalchemy.ext.asyncio import AsyncSession

router = Router()
image_processor = ImageProcessor()
food_analyzer = FoodAnalyzer()


@router.message(F.text == COUNT_THE_NUMBER_OF_CALORIES_TEXT)
async def message_before_count(message: Message, session: AsyncSession, state: FSMContext):
    tg_id = message.from_user.id
    repo = UserRepository(session=session)
    user = await repo.get_user(telegram_id=tg_id)
    
    if not user:
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∂–µ—Ç—Å—è, –º—ã –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º—ã.\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    elif not await repo.check_subscription_active(telegram_id=tg_id) and not user.is_admin:
        await message.answer("‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É üí´")
        return
        
    await state.set_state(MainGroup.count_the_number_of_calories_state)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –±–ª—é–¥–∞")
    
@router.message(MainGroup.count_the_number_of_calories_state)
async def analyze_food_composition(message: Message, session: AsyncSession, state: FSMContext) -> None:
    if not message.photo:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞/–ø—Ä–æ–¥—É–∫—Ç–∞")
        return
    repo = UserRepository(session=session)
    
    user = await repo.get_user(telegram_id=message.from_user.id)
    user.number_of_requests += 1
        
    status_message = await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –±–ª—é–¥–æ...")
    
    base64_image = await image_processor.process_telegram_photo(message=message)
    response = food_analyzer.analyze_product_calories(base64_image=base64_image)
    
    formatted_response = format_calorie_analysis_response(response)
    await status_message.delete()
    
    await message.answer(
        formatted_response,
        parse_mode='HTML',
        reply_markup=choose_action_kb
    )
    
    await state.clear()
    
def format_calorie_analysis_response(response_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –≤ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    
    product_name = response_data.get('product_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç')
    weight = response_data.get('estimated_weight', 'N/A')
    calories = response_data.get('calories', 'N/A')
    protein = response_data.get('protein', 'N/A')
    fat = response_data.get('fat', 'N/A')
    carbs = response_data.get('carbs', 'N/A')
    
    message_lines = []
    
    message_lines.append(f"üçΩÔ∏è <b>{product_name}</b>")
    message_lines.append("")
    
    message_lines.append("üìä <b>–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å:</b>")
    message_lines.append(f"   ‚Ä¢ –í–µ—Å: <b>{weight}</b>")
    message_lines.append(f"   ‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: <b>{calories}</b>")
    message_lines.append("")
    
    message_lines.append("‚öñÔ∏è <b>–°–æ—Å—Ç–∞–≤ –ë–ñ–£:</b>")
    message_lines.append(f"   ü•ö –ë–µ–ª–∫–∏: <b>{protein}</b>")
    message_lines.append(f"   ü•ë –ñ–∏—Ä—ã: <b>{fat}</b>")
    message_lines.append(f"   üåæ –£–≥–ª–µ–≤–æ–¥—ã: <b>{carbs}</b>")
    message_lines.append("")
    
    description = response_data.get('description', '')
    if description:
        message_lines.append("üìù <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>")
        message_lines.append(f"<i>{description}</i>")
        message_lines.append("")
    
    return "\n".join(message_lines)