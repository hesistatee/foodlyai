from aiogram import Router, F
from aiogram.types import Message
from static.texts import SUBSCRIBE_STATUS_TEXT
from utils.keyboards import subscription_keyboard
from database.repositories import UserRepository
from sqlalchemy.ext.asyncio import AsyncSession

router = Router()


@router.message(F.text == SUBSCRIBE_STATUS_TEXT)
async def check_subscription_status(message: Message, session: AsyncSession) -> None:
    tg_id = message.from_user.id
    repo = UserRepository(session=session)
    
    user = await repo.get_user(telegram_id=tg_id)
    
    if not user:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∂–µ—Ç—Å—è, –º—ã –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º—ã.\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start"
        )
        return
    
    if user.is_admin:
        await message.answer(
            "üéØ –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
            "–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤",
            reply_markup=subscription_keyboard
        )
    elif not await repo.check_subscription_active(telegram_id=tg_id):
        await message.answer(
            "‚ùå –°—Ä–æ–∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫\n\n"
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñüëá",
            reply_markup=subscription_keyboard
        )
    else:
        end_date = user.subscription_end
        formatted_date = end_date.strftime("%d.%m.%Y –≤ %H:%M")
                                           
        await message.answer(
            f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {formatted_date}\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–πüëá",
            reply_markup=subscription_keyboard
        )
    